/*
 *  GameElements.h
 *  AntsGame
 *
 *  Created by Mauro Pellanda on 13.03.12.
 *  Copyright 2012 UZH. All rights reserved.
 *
 */

#ifndef GAME_ELEMENTS_H
#define GAME_ELEMENTS_H

#include <iostream>
#include <ctime>
#include <vector>
#include <algorithm>

#include "MathVecLibrary.h"
#include "Color.h"
#include "Random_numbers.h"
#include "Geometry.h"


class Player;
class Nest;
class GameEngine;
class Food;

enum ObjectType {
	obj_trail	= 10,
	obj_ant		= 20,
	obj_nest	= 30,
	obj_food	= 40,
	obj_none	= 50
};

enum AntState {
	s_search			= 10,
	s_harvest			= 20,
	s_bring_food_nest	= 30,
	s_attack			= 40,
	s_goto_food			= 50,
	s_discharge			= 60,
	s_follow_trail		= 70,
	s_attacking			= 80
};


class TimeController {
private:
	clock_t last_move;
	double  interval;

public:
	TimeController() : last_move(std::clock()) , interval(0.) {}
	TimeController(double t) : last_move(std::clock()), interval(t){}
	
	bool can_run();
};




class BaseObject {
private:
	static int _id_count;
	void increment_id();
	void decrement_id();
		
	int unique_id; //generated by the static _id_count
protected:
	
	V2 position;
	double size;
	Color color;
	

public:
	ObjectType obj_type;
	
public:
	//d'tor, c'tor, copy'tor
	virtual ~BaseObject(){decrement_id();}
	BaseObject();
	BaseObject(BaseObject const& copy_of_me);
	
	//getter and setter
	double const& get_size() const {return size;}
	
	V2 const& get_position() const {return position;}
	V2& set_position() { return position;}
	
	int get_id() const {return unique_id;};
	
	Color const& get_color() const {return color;}
	Color & set_color() {return color;}
};



class Trail : public BaseObject {
private:
	//clock_t last_move;	// keep track of the last update
	TimeController intensity_decrease_t;
	double intensity;	// a sort of life time of the trail
	AntState state;		// it can be tweaked to have more types
	int invalid_trail;	// flag to tell if the trail will not be used
	
public:
	Player* player;		//maybe turn it to ant?
	
public:
	Trail();
	
	//getter and setter
	AntState const& get_state() const {return state;}
	AntState& set_state() {return state;}
	
	double const& get_intensity() const {return intensity;}
	double& set_intensity() {return intensity;}
	
	
	int const& get_invalid_trail() const {return invalid_trail;}
	int & set_invalid_trail() {return invalid_trail;}
	
	Player* & set_player() {return player;}
	
	//actions
	void update_trail();

};
	

class Ant : public BaseObject {
private:
	V2 direction;
	
	double attack;
	double defence;
	double life;
	
	TimeController move_t;
	
	double speed;
	double cost;
	
	double sight_r;
	AntState state;
	
	TimeController harvest_t;
	
	double reservoir;
	double reservoir_limit;
	
	TimeController trail_placing_t;

public:
	Player* player;
	Nest* nest;
	GameEngine* g_eng;

public:
	Ant();
	
	//getters & setters
	double& set_life() {return life;}
	double  const& get_life() const {return life;}
	
	AntState const& get_state() const {return state;}
	
	double  const& get_cost() const {return cost;}
	
	double const& get_sight_r() const {return sight_r;}
	
	//auxilliary functions
	bool reservoir_full() const;	//check if the ant is carrying resources
	bool reservoir_empty() const;	//check if the ant is not carrying resources
	bool is_dead() const;			//check if life is 0
	
	
	//environment analysis function
	std::vector<BaseObject * > look(std::vector< BaseObject * >  obj_list) const;
	
	
	
	//decide what to do and perform the action
	void make_move(std::vector<BaseObject * > obj_list);
	
	//actions
	void attack_ant(Ant& vs_ant);	
	void harvest(Food& food);
	void go_to_food(Food& food);
	void rotate_dir(double alpha);	//angle in degrees
	void move_dir();				//move by step given by speed, in the actual direction
	void move_dir_without_limit();	//same as before, without time checking
	void move_random();				//choose a random direction then move
	void go_to(V2 const& pos);
	Trail put_trail();
	
};


class Nest : public BaseObject {
private:
	std::vector<Ant> ants;	//the ants created by this nest
	double resources;		//how much food the nest contains
	TimeController spawn_t; //controls how many seconds need to wait before nest can spawn a new ant
	V2 spawning_point;
	
public:
	Player* player;
	GameEngine* g_eng;

public:
	Nest();
	
	//getters & setters
	double& set_resources() {return resources;}
	double const& get_resources() const {return resources;}
	
	std::vector<Ant> const& get_ants() const {return ants;}
	std::vector<Ant> & set_ants() {return ants;}
	
	//actions
	void spawn_ant();
	void update_spawning_point();
};




class Food : public BaseObject {
private:
	double resources;
public:
	Food();
	
	//getters & setters
	double const& get_resources() const {return resources;}
	double& set_resources() {return resources;}
};


class BBox : public BaseObject {
	//class for the bounding box of the game
public:
	BBox();
	BBox(V2 pos, double s);
};

class Player{
private:
	std::string nome;
	Color color;
	Nest nest;					//for now just one nest per player
	std::vector<Trail> trails;	//holds the trails, produced by the ants in the nest
	
public:
	Player();
	Player(std::string n);
	
	//getters & setters
	Color& set_color() {return color;}
	Color const& get_color() const {return color;}
	
	Nest& set_nest() {return nest;}
	Nest const& get_nest() const {return nest;}
	
	std::vector< Trail > const& get_trails() const {return trails;}
	std::vector< Trail > & set_trails() {return trails;}
	
	std::string const & get_name() const {return nome;}
	
	//actions
	void update_trails();
};

//printing functions
std::ostream& operator<<(std::ostream& outs, Trail const& t);
std::ostream& operator<<(std::ostream& outs, Food const& t);
std::ostream& operator<<(std::ostream& outs, Nest const& t);
std::ostream& operator<<(std::ostream& outs, Ant const& t);
std::ostream& operator<<(std::ostream& outs, Player const& t);

//iterators definition
typedef std::vector<BaseObject>::iterator			bObject_it;
typedef std::vector<BaseObject>::const_iterator		bObject_cit;

typedef std::vector<Trail*>::iterator				it_trailptr;

typedef std::vector< Trail >::iterator				IT_Trail;
typedef std::vector< Player >::iterator				IT_Player;
typedef std::vector< Ant >::iterator				IT_Ant;
typedef std::vector< Food >::iterator				IT_Food;

typedef std::vector<BaseObject*>::iterator			IT_bObjptr;
typedef std::vector<BaseObject*>::const_iterator	IT_cbObjptr;


#endif